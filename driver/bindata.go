// Code generated by go-bindata.
// sources:
// override/templates_test/singleton/sqlite3_main_test.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates_testSingletonSqlite3_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5f\x4f\xdb\x3a\x14\x7f\x8e\x3f\xc5\xb9\x91\xb8\xb2\x21\x98\x2b\xf1\xc6\x55\x54\x8d\x56\x9b\xf6\x07\xc6\x28\x13\x2f\x48\x23\x24\x27\xe5\x88\xc4\x0e\xb6\x43\xa8\x50\xbf\xfb\x64\xa7\x2d\x29\x2a\x6c\x0f\x1b\x0f\x54\x3a\x39\xfe\xfd\x39\xc7\xfe\x3d\x64\x06\xcc\xec\x71\xfa\xed\x0b\x39\xbc\xc3\x39\xa4\x60\x70\x86\x8f\x8d\x3c\x69\xad\x1b\xeb\xba\xa1\x0a\xf9\x35\x1f\xd5\x24\x38\x4f\xae\x94\x18\x5d\xd9\xbd\x52\x1b\xa4\x99\x82\x3b\x9c\xcb\xdd\xd1\x95\x12\x7b\xd7\x82\x31\x37\x6f\x10\xec\x7d\x45\x0e\x2f\xd0\x3a\x34\x60\x9d\x69\x73\x07\x4f\x2c\x2a\x6e\xc6\x5a\x29\xd8\xb5\xf7\x95\x9c\x1c\x33\x5f\x38\xcd\x6a\x8c\xac\x33\xa4\x66\x2c\x72\x68\xdd\xe4\xd8\x97\x60\x59\x5a\x30\x56\xb6\x2a\x07\x52\xe4\xb8\xe8\x31\x4e\x32\x52\x90\xc2\xbf\x43\x92\xa7\xc5\xba\x95\xdb\x40\xb0\xfe\x24\xc0\xa2\x6b\x1b\x2e\x00\x8d\xd1\xc6\x63\x78\xbf\x68\x4c\x5f\x60\x0c\x00\xc0\xca\x5e\x0b\xa4\xf0\x40\x0d\x1a\xf9\x01\xdd\x34\x68\xe0\x71\x8f\x76\x28\x8b\x1b\x95\xd5\x18\x8b\x70\x80\x4a\xa8\x50\xf1\xd5\x39\x01\x69\x0a\xff\xc1\x53\xf8\xe6\xff\x0c\xba\xd6\xa8\x9e\xc2\xca\x53\xec\x78\xac\x34\xf4\x10\x60\x1b\xcc\xa9\x24\x2c\x96\x60\x0b\xc6\x22\x2b\x07\xf6\x53\x28\xa9\xc2\x26\x73\xb7\xf2\x93\x26\xc5\xb5\x95\x17\x58\x37\x13\x32\x5c\x24\x50\xd6\x4e\x4e\x1b\x43\xca\x95\x3c\xbe\xd1\x54\xed\x2f\x25\xee\xef\x14\xd2\xde\x57\x71\x02\x26\x53\x85\xfc\xa8\x1c\x17\x42\xf8\x41\xb7\x75\x33\xae\x0b\x38\x4a\x01\x1f\x31\x97\x63\x5d\xd7\x99\x2a\xd6\xde\xe2\x04\xe2\xfd\xbc\x2e\xfc\xaf\xf4\xcd\x71\xb2\x1e\x89\x60\x51\x6e\x30\x73\xf8\x0b\x80\xa1\x01\xcf\x69\x12\xe8\x7c\x3f\x69\x79\x46\x0d\x72\xb1\x96\x21\xa7\xae\xd0\xad\x83\x14\xba\x01\xb6\xaf\x86\xcd\x2a\xec\xde\x7f\xc6\xf9\x04\xad\x33\x7a\x8e\x86\x0f\xef\x66\x02\xc6\x83\x53\x19\x36\x98\xc2\x33\x64\x66\x1c\x17\xff\x87\xf2\x3f\x29\x28\xaa\xfc\xaa\xa3\xcd\x3d\x5c\x9a\xac\xe1\x68\x4c\x02\x71\x99\x51\x85\x05\x38\x0d\xd6\x1f\x5d\xde\xd9\xc3\x00\x08\x79\x6f\x2f\x16\x2c\x5a\x0c\xc8\x86\x5a\xff\x10\x5d\x0f\xb9\x49\xb8\xc5\xde\x65\x46\xdb\xe8\xfc\x4d\x38\xf3\x17\xa1\x52\x9e\x47\xfc\x9e\x82\x2e\x23\x07\xa5\x36\x6f\x78\x66\x51\x27\xc7\x95\xb6\xc8\x05\x1c\x1c\xc0\xbb\xd2\xbf\xe4\xd5\x2d\x22\x0b\x85\x56\x98\x40\xee\x3b\xc0\xdd\x22\x74\x86\x1c\x02\xaa\x02\x74\x19\x0a\x0d\x35\xc8\xb6\x8e\xee\xef\x5a\xd9\x3e\xcf\x25\x92\xa2\xea\x8d\x9c\x70\x98\x99\x42\x77\x6a\x18\x15\x54\x86\x77\x10\x72\x6b\x20\x76\x55\x5b\xcd\x68\x83\x45\x5b\x79\x8e\xb5\x7e\x40\xbe\xf9\x24\x5e\x67\xce\xb5\xf2\xac\x7c\x99\x8c\x49\xcf\x2f\x5e\x15\xf0\x22\x64\x56\x0d\x49\x30\x18\xa4\x6c\x46\x5c\xf4\xdc\xd1\x6f\xc3\xf3\x7c\x6d\x50\x0d\xdf\xef\x46\xaa\xf8\xf8\x39\xda\xb1\xa3\x1f\x95\xce\xd3\xef\x17\xe3\x97\xef\x5b\xac\x35\x2c\x37\xfc\x9a\x36\x45\x55\x20\xed\x65\xf9\x44\xf3\x99\xb0\x99\x6e\xb1\x94\x21\x78\xc2\xff\x9a\x66\x26\x73\xa4\x95\xf5\xcb\xeb\xe5\xce\xb4\xb6\x28\xcf\x5b\xc5\xe3\x76\x15\x4d\xbd\x9d\x81\x7e\x8f\x97\x40\xec\x4f\xbd\xd4\x14\x45\x5b\xd5\x6c\x1d\xdf\x82\xfd\x0c\x00\x00\xff\xff\x8d\x5c\x47\xd9\x0f\x07\x00\x00")

func templates_testSingletonSqlite3_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonSqlite3_main_testGoTpl,
		"templates_test/singleton/sqlite3_main_test.go.tpl",
	)
}

func templates_testSingletonSqlite3_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonSqlite3_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/sqlite3_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates_test/singleton/sqlite3_main_test.go.tpl": templates_testSingletonSqlite3_main_testGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"sqlite3_main_test.go.tpl": &bintree{templates_testSingletonSqlite3_main_testGoTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

