// Code generated by go-bindata.
// sources:
// override/templates_test/singleton/sqlite3_main_test.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates_testSingletonSqlite3_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xc1\x6e\xdb\x3c\x10\x84\xcf\xe2\x53\xec\x4f\x20\x3f\xc8\x44\xe1\xa5\xb7\x00\x82\x81\xd8\x97\x16\x4d\x8b\x26\xee\xcd\x40\xa3\xd8\x2b\x75\x11\x6a\x29\x93\x54\x1a\x23\xf0\xbb\x17\x94\x64\x47\x35\x92\xe8\xa0\xc3\x88\x9a\xf9\x76\x96\x4f\xa5\x07\x5f\x3f\xdf\xfd\xf8\x4a\x11\x1f\x71\x07\x05\x78\xac\xf1\xb9\x35\x37\x5d\x88\x73\xd7\xb4\x64\x51\xdd\xab\x59\x43\x5a\xa9\x7c\xc5\x7a\xb6\x0a\x17\x95\xf3\x48\x35\xc3\x23\xee\xcc\xf9\x6c\xc5\xfa\xe2\x5e\x0b\x11\x77\x2d\x42\xd8\x5a\x8a\xb8\xc4\x10\xd1\x43\x88\xbe\x5b\x47\x78\x11\xd9\xe6\x61\xee\x98\xe1\x3c\x6c\xad\x59\x5c\x8b\x24\x7c\x2b\x1b\xcc\x42\xf4\xc4\xb5\xc8\x22\x86\xb8\xb8\x4e\x12\x8c\xd2\x5e\x88\xaa\xe3\x35\x10\x53\x54\x7a\xf0\xb8\x29\x89\xa1\x80\xff\xa7\x21\x2f\xfb\xe3\x51\x15\xfa\x80\xe3\x27\x0d\x01\x63\xd7\x2a\x0d\xe8\xbd\xf3\xc9\x23\x98\x49\x52\x01\x15\x59\x6c\xcb\xf8\xdb\x7c\x71\xc4\xca\x05\xb3\xc4\xa6\x5d\x90\x57\x3a\x87\xaa\x89\xe6\xae\xf5\xc4\xb1\x52\xf2\xc1\x91\xbd\x1c\xbc\x3f\x5d\x9e\x6d\x4c\xd8\x5a\x99\x83\x2f\x79\x63\x3e\x73\x54\x5a\x6b\x21\x32\x8f\xb1\xf3\x0c\x4c\xf6\x03\xa4\x88\xa5\xdf\xb8\x3f\x3c\xa5\xa2\x0a\x82\x19\x2b\xfa\xaf\x48\x06\x49\xcd\x0e\x9a\x99\x5b\x17\x50\x69\x91\xed\x5f\x53\x5c\x30\xb7\xd8\xb8\x27\x54\xd3\x99\xf4\x07\xc9\x6b\xc7\x29\x55\x8d\x4b\xc8\x87\x7c\xfd\x2e\x00\x8c\xcf\x18\x78\x38\x90\xf7\x03\xf6\x28\xe9\xf6\xa0\xf7\x83\x91\xc8\x5e\x4f\x24\xb1\x48\x77\xc1\x7c\x6f\x91\x95\x1c\x9b\x93\x27\xad\xa6\xfa\xaf\xce\xc2\xec\x97\x75\xeb\xe2\xe7\x72\x2e\x73\xf8\x67\x18\x7d\x64\xa0\xaa\xf7\x7c\x8f\x8d\xc9\xf6\xa1\x03\x56\xda\x28\x5c\x9d\x6e\x57\x1a\x23\x73\x18\xdf\x0d\xd5\xbe\x8c\xe4\x38\x48\x2d\xb2\x01\xb7\x76\x2e\xa0\xb9\xed\x58\xc9\xae\xed\x51\x0e\xe3\x4c\xf8\x93\x5f\x0e\x32\xfd\x75\xca\x94\x65\x6f\xd2\xbc\x59\xdf\x5e\xfc\x0d\x00\x00\xff\xff\x7d\xf9\x09\xeb\x7a\x03\x00\x00")

func templates_testSingletonSqlite3_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonSqlite3_main_testGoTpl,
		"templates_test/singleton/sqlite3_main_test.go.tpl",
	)
}

func templates_testSingletonSqlite3_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonSqlite3_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/sqlite3_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates_test/singleton/sqlite3_main_test.go.tpl": templates_testSingletonSqlite3_main_testGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"sqlite3_main_test.go.tpl": &bintree{templates_testSingletonSqlite3_main_testGoTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

